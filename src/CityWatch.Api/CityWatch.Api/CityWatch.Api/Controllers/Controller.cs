//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace CityWatch.Api.Controllers
{
    using Microsoft.AspNetCore.Mvc;
    using System.Collections.Generic;
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public interface IController
    {

        /// <summary>
        /// регистрация пользователя в системе
        /// </summary>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task SignupAsync(Body body);

        /// <summary>
        /// авторизация пользователя в системе
        /// </summary>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Response> LoginAsync(Body2 body);

        /// <summary>
        /// выход из системы
        /// </summary>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task LogoutAsync();

        /// <summary>
        /// обновления тоукена доступа
        /// </summary>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Response2> RefreshtokenAsync(Body3 body);

        /// <summary>
        /// сброс пароля на почту или на телефон пользователя
        /// </summary>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task ResetAsync(Body4 body);

        /// <summary>
        /// сохранение пароля после сброса
        /// </summary>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task SaveAsync(Body5 body);

        /// <summary>
        /// смена пароля
        /// </summary>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task UpdateAsync(Body6 body);

        /// <summary>
        /// Получаем адрес по координатам
        /// </summary>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Response3> AddressAsync(Body7 body);

        /// <summary>
        /// Получаем координаты по адресу
        /// </summary>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Response4> CoordsAsync(Body8 body);

        /// <summary>
        /// оповещение пользователей
        /// </summary>






        /// <returns>OK</returns>

        System.Threading.Tasks.Task MailingPOSTAsync(MailingBody body);

        /// <summary>
        /// статистика по категориям за период
        /// </summary>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Response5> StatisticAsync(Body9 body);

        /// <summary>
        /// тепловая карта проблемных \ решенных зон за период
        /// </summary>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Response6> HeatmapAsync(Body10 body);

        /// <summary>
        /// импортирование заявок в формате Excel-файла(ов)
        /// </summary>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task ImportAsync(System.Collections.Generic.IEnumerable<FileParameter> filenames);

        /// <summary>
        /// экспортирование заявок в формате Excel-файла
        /// </summary>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<FileResult> ExportAsync(Body11 body);

        /// <summary>
        /// Находим пользователя по идентификатору
        /// </summary>

        /// <param name="userId">Целочисленный идентификатор пользователя</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<User> UsersGETAsync(long userId);

        /// <summary>
        /// Обновляем пользователя по идентификатору
        /// </summary>

        /// <param name="userId">Целочисленный идентификатор пользователя</param>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<User> UsersPUTAsync(long userId, UserForm body);

        /// <summary>
        /// Удаляем пользователя по идентификатору
        /// </summary>

        /// <param name="userId">Parameter description in CommonMark or HTML.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<User> UsersDELETEAsync(long userId);

        /// <summary>
        /// возвращаем текущего пользователя
        /// </summary>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<User> MeAsync();

        /// <summary>
        /// Находим профиль пользователя по идентификатору пользователя
        /// </summary>

        /// <param name="userId">Целочисленный идентификатор пользователя</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Profile> ProfileAsync(long userId);

        /// <summary>
        /// Список пользователей
        /// </summary>

        /// <param name="page">идентификатор страницы</param>

        /// <param name="size">размер выдачи на странице</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Response7> UsersGET2Async(long? page, long? size);

        /// <summary>
        /// Создаем пользователя
        /// </summary>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<User> UsersPOSTAsync(UserForm body);

        /// <summary>
        /// Обновляем роли пользователя
        /// </summary>

        /// <param name="userId">Целочисленный идентификатор пользователя</param>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<User> RolesPUTAsync(long userId, Body12 body);

        /// <summary>
        /// блокируем пользователя по идентификатору
        /// </summary>

        /// <param name="userId">Целочисленный идентификатор пользователя</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<User> BlockedAsync(long userId);

        /// <summary>
        /// разблокируем пользователя по идентификатору
        /// </summary>

        /// <param name="userId">Целочисленный идентификатор пользователя</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<User> UnblockedAsync(long userId);

        /// <summary>
        /// Находим профиль пользователя по идентификатору
        /// </summary>

        /// <param name="profileId">Целочисленный идентификатор профиля пользователя</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Profile> ProfilesGETAsync(long profileId);

        /// <summary>
        /// Обновляем профиль пользователя по идентификатору
        /// </summary>

        /// <param name="profileId">Целочисленный идентификатор профиля пользователя</param>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Profile> ProfilesPUTAsync(long profileId, ProfileForm body);

        /// <summary>
        /// Удаляем пользователя по идентификатору
        /// </summary>

        /// <param name="profileId">Parameter description in CommonMark or HTML.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Profile> ProfilesDELETEAsync(long profileId);

        /// <summary>
        /// Список профилей пользователя
        /// </summary>

        /// <param name="page">идентификатор страницы</param>

        /// <param name="size">размер выдачи на странице</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Response8> ProfilesGET2Async(long? page, long? size);

        /// <summary>
        /// Создаем профиль
        /// </summary>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Profile> ProfilesPOSTAsync(ProfileForm body);

        /// <summary>
        /// Находим категорию по идентификатору
        /// </summary>

        /// <param name="problemCategoryId">Целочисленный идентификатор категории</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<User> ProblemCategoriesGETAsync(long problemCategoryId);

        /// <summary>
        /// Обновляем категорию по идентификатору
        /// </summary>

        /// <param name="problemCategoryId">Целочисленный идентификатор категории</param>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<ProblemCategory> ProblemCategoriesPUTAsync(long problemCategoryId, ProblemCategoryForm body);

        /// <summary>
        /// Удаляем категорию по идентификатору
        /// </summary>

        /// <param name="problemCategoryId">Parameter description in CommonMark or HTML.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<ProblemCategory> ProblemCategoriesDELETEAsync(long problemCategoryId);

        /// <summary>
        /// Список категорий проблем
        /// </summary>

        /// <param name="page">идентификатор страницы</param>

        /// <param name="size">размер выдачи на странице</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Response9> ProblemCategoriesGET2Async(long? page, long? size);

        /// <summary>
        /// Создаем новую категорию проблем
        /// </summary>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<ProblemCategory> ProblemCategoriesPOSTAsync(ProblemCategoryForm body);

        /// <summary>
        /// Список активных запросов в категории
        /// </summary>

        /// <param name="problemCategoryId">Целочисленный идентификатор категории</param>

        /// <param name="page">идентификатор страницы</param>

        /// <param name="size">размер выдачи на странице</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Response10> ActiveRequestsAsync(long problemCategoryId, long? page, long? size);

        /// <summary>
        /// Список выполненных запросов в категории
        /// </summary>

        /// <param name="problemCategoryId">Целочисленный идентификатор категории</param>

        /// <param name="page">идентификатор страницы</param>

        /// <param name="size">размер выдачи на странице</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Response11> CompletedRequestsAsync(long problemCategoryId, long? page, long? size);

        /// <summary>
        /// Список архивных запросов в категории
        /// </summary>

        /// <param name="problemCategoryId">Целочисленный идентификатор категории</param>

        /// <param name="page">идентификатор страницы</param>

        /// <param name="size">размер выдачи на странице</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Response12> ArchiveRequestsAsync(long problemCategoryId, long? page, long? size);

        /// <summary>
        /// Находим заявку по идентификатору
        /// </summary>

        /// <param name="requestId">Целочисленный идентификатор заявки</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Request> RequestsGETAsync(long requestId);

        /// <summary>
        /// Обновляем заявку по идентификатору
        /// </summary>

        /// <param name="requestId">Целочисленный идентификатор заявки</param>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Request> RequestsPUTAsync(long requestId, Microsoft.AspNetCore.Http.IFormFile body);

        /// <summary>
        /// Удаляем заявку по идентификатору
        /// </summary>

        /// <param name="requestId">Parameter description in CommonMark or HTML.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Request> RequestsDELETEAsync(long requestId);

        /// <summary>
        /// Список заявок
        /// </summary>

        /// <param name="page">идентификатор страницы</param>

        /// <param name="size">размер выдачи на странице</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Response13> RequestsGET2Async(long? page, long? size);

        /// <summary>
        /// Создаем заявку
        /// </summary>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Request> RequestsPOSTAsync(Microsoft.AspNetCore.Http.IFormFile body);

        /// <summary>
        /// Подбор заявок в радиусе
        /// </summary>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Request>> InRangeAsync(Body13 body);

        /// <summary>
        /// модификация рейтинга заявки (+-)
        /// </summary>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Request>> RatingAsync(Body14 body);

        /// <summary>
        /// формируем заявку в виде pdf
        /// </summary>

        /// <param name="requestId">Целочисленный идентификатор заявки</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<FileResult> PdfAsync(long requestId);

        /// <summary>
        /// отмечаем просмотр заявки по идентификатору для текущего авторизованного пользователя
        /// </summary>

        /// <param name="requestId">Целочисленный идентификатор заявки</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task WatchAsync(long requestId);

        /// <summary>
        /// Находим исполнителя по идентификатору
        /// </summary>

        /// <param name="contractorId">Целочисленный идентификатор</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Contractor> ContractorsGETAsync(long contractorId);

        /// <summary>
        /// Обновляем исполнителя по идентификатору
        /// </summary>

        /// <param name="contractorId">Целочисленный идентификатор исполнителя</param>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Contractor> ContractorsPUTAsync(long contractorId, ContractorForm body);

        /// <summary>
        /// Удаляем исполнителя по идентификатору
        /// </summary>

        /// <param name="contractorId">Parameter description in CommonMark or HTML.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Contractor> ContractorsDELETEAsync(long contractorId);

        /// <summary>
        /// Список архивных заявок по исполнительному органу
        /// </summary>

        /// <param name="contractorId">Целочисленный идентификатор</param>

        /// <param name="page">идентификатор страницы</param>

        /// <param name="size">размер выдачи на странице</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Response14> ArchiveAsync(long contractorId, long? page, long? size);

        /// <summary>
        /// Список активных заявок по исполнительному органу
        /// </summary>

        /// <param name="contractorId">Целочисленный идентификатор</param>

        /// <param name="page">идентификатор страницы</param>

        /// <param name="size">размер выдачи на странице</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Response15> ActiveAsync(long contractorId, long? page, long? size);

        /// <summary>
        /// Находим активные задачи для выбранного исполнительного \ контролирующего органа
        /// </summary>

        /// <param name="contractorId">Целочисленный идентификатор</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<ContractorTask> TasksGETAsync(long contractorId);

        /// <summary>
        /// Список профилей исполнительных органов
        /// </summary>

        /// <param name="page">идентификатор страницы</param>

        /// <param name="size">размер выдачи на странице</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Response16> ContractorsGET2Async(long? page, long? size);

        /// <summary>
        /// Создаем профиль исполнительного органа
        /// </summary>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Contractor> ContractorsPOSTAsync(ContractorForm body);

        /// <summary>
        /// Находим черновик заявки по идентификатору
        /// </summary>

        /// <param name="storedRequestId">Целочисленный идентификатор заявки</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<StoredRequest> StoredRequestsGETAsync(long storedRequestId);

        /// <summary>
        /// Обновляем черновик заявки по идентификатору
        /// </summary>

        /// <param name="storedRequestId">Целочисленный идентификатор черновика заявки</param>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<StoredRequest> StoredRequestsPUTAsync(long storedRequestId, StoredRequestForm body);

        /// <summary>
        /// Удаляем черновик заявки по идентификатору
        /// </summary>

        /// <param name="storedRequestId">Parameter description in CommonMark or HTML.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<StoredRequest> StoredRequestsDELETEAsync(long storedRequestId);

        /// <summary>
        /// Список черновиков заявок
        /// </summary>

        /// <param name="page">идентификатор страницы</param>

        /// <param name="size">размер выдачи на странице</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Response17> StoredRequestsGET2Async(long? page, long? size);

        /// <summary>
        /// Создаем черновик заявки.
        /// </summary>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<StoredRequest> StoredRequestsPOSTAsync(StoredRequestForm body);

        /// <summary>
        /// Находим роль по идентификатору
        /// </summary>

        /// <param name="roleId">Целочисленный идентификатор заявки</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Role> RolesGETAsync(long roleId);

        /// <summary>
        /// Обновляем роль по идентификатору
        /// </summary>

        /// <param name="roleId">Целочисленный идентификатор роли</param>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Role> RolesPUT2Async(long roleId, RoleForm body);

        /// <summary>
        /// Удаляем роль по идентификатору
        /// </summary>

        /// <param name="roleId">Parameter description in CommonMark or HTML.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Role> RolesDELETEAsync(long roleId);

        /// <summary>
        /// Список всех ролей
        /// </summary>

        /// <param name="page">идентификатор страницы</param>

        /// <param name="size">размер выдачи на странице</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Response18> RolesGET2Async(long? page, long? size);

        /// <summary>
        /// Создаем новую роль
        /// </summary>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Role> RolesPOSTAsync(RoleForm body);

        /// <summary>
        /// Находим рассылку по идентификатору
        /// </summary>

        /// <param name="mailingId">Целочисленный идентификатор записи</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<MailingQuery> MailingGETAsync(long mailingId);

        /// <summary>
        /// Обновляем черновик заявки по идентификатору
        /// </summary>

        /// <param name="mailingId">Целочисленный идентификатор</param>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<MailingQuery> MailingPUTAsync(long mailingId, MailingQueryForm body);

        /// <summary>
        /// удаляем из рассылки по идентификатору
        /// </summary>

        /// <param name="mailingId">Parameter description in CommonMark or HTML.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<MailingQuery> MailingDELETEAsync(long mailingId);

        /// <summary>
        /// Список всех рассылок
        /// </summary>

        /// <param name="page">идентификатор страницы</param>

        /// <param name="size">размер выдачи на странице</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Response19> MailingGET2Async(long? page, long? size);

        /// <summary>
        /// Создаем рассылку
        /// </summary>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<MailingQuery> MailingPOST2Async(MailingQueryForm body);

        /// <summary>
        /// запуск рассылок в CRON
        /// </summary>

        /// <param name="page">идентификатор страницы</param>

        /// <param name="size">размер выдачи на странице</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task HandlerAsync(long? page, long? size);

        /// <summary>
        /// Находим задачу по по идентификатору
        /// </summary>

        /// <param name="taskId">Целочисленный идентификатор записи</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<ContractorTask> TasksGET2Async(long taskId);

        /// <summary>
        /// Обновляем заявку по идентификатору
        /// </summary>

        /// <param name="taskId">Целочисленный идентификатор</param>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<ContractorTask> TasksPUTAsync(long taskId, ContractorTaskForm body);

        /// <summary>
        /// удаляем задачу по идентификатору
        /// </summary>

        /// <param name="taskId">Parameter description in CommonMark or HTML.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<ContractorTask> TasksDELETEAsync(long taskId);

        /// <summary>
        /// Список всех задач
        /// </summary>

        /// <param name="page">идентификатор страницы</param>

        /// <param name="size">размер выдачи на странице</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Response20> TasksGET3Async(long? page, long? size);

        /// <summary>
        /// Создаем новую задачу для исполнительного \ контролирующего органа
        /// </summary>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<ContractorTask> TasksPOSTAsync(ContractorTaskForm body);

        /// <summary>
        /// Находим историю по идентификатору
        /// </summary>

        /// <param name="storyId">Целочисленный идентификатор истории</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Story> StoriesGETAsync(long storyId);

        /// <summary>
        /// Обновляем историю по идентификатору
        /// </summary>

        /// <param name="storyId">Целочисленный идентификатор истории</param>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Story> StoriesPUTAsync(long storyId, StoryForm body);

        /// <summary>
        /// Удаляем историю по идентификатору
        /// </summary>

        /// <param name="storyId">Parameter description in CommonMark or HTML.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Role> StoriesDELETEAsync(long storyId);

        /// <summary>
        /// Устанавливает просмотр истории для текущего пользователя
        /// </summary>

        /// <param name="storyId">Целочисленный идентификатор истории</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task Watch2Async(long storyId);

        /// <summary>
        /// Список всех историй
        /// </summary>

        /// <param name="page">идентификатор страницы</param>

        /// <param name="size">размер выдачи на странице</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Response21> StoriesGET2Async(long? page, long? size);

        /// <summary>
        /// Создаем новую историю
        /// </summary>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Story> StoriesPOSTAsync(StoryForm body);

        /// <summary>
        /// Находим регион по идентификатору
        /// </summary>

        /// <param name="regionId">Целочисленный идентификатор истории</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Region> RegionsGETAsync(long regionId);

        /// <summary>
        /// Обновляем регион по идентификатору
        /// </summary>

        /// <param name="regionId">Целочисленный идентификатор регион</param>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Region> RegionsPUTAsync(long regionId, RegionForm body);

        /// <summary>
        /// Удаляем регион по идентификатору
        /// </summary>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Region> RegionsDELETEAsync(long regionId);

        /// <summary>
        /// Список всех регионов
        /// </summary>

        /// <param name="page">идентификатор страницы</param>

        /// <param name="size">размер выдачи на странице</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Response22> RegionsGET2Async(long? page, long? size);

        /// <summary>
        /// Создаем новуый регион
        /// </summary>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Region> RegionsPOSTAsync(RegionForm body);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    // [Microsoft.AspNetCore.Mvc.Route("api.domain-name.ru")]
    [ApiController]
    [Route("[controller]")]

    public partial class Controller : Microsoft.AspNetCore.Mvc.Controller
    {
        private IController _implementation;

        public Controller(IController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>
        /// регистрация пользователя в системе
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("auth/signup")]
        public System.Threading.Tasks.Task Signup([Microsoft.AspNetCore.Mvc.FromBody] Body body)
        {

            return _implementation.SignupAsync(body);
        }

        /// <summary>
        /// авторизация пользователя в системе
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("auth/login")]
        public System.Threading.Tasks.Task<Response> Login([Microsoft.AspNetCore.Mvc.FromBody] Body2 body)
        {

            return _implementation.LoginAsync(body);
        }

        /// <summary>
        /// выход из системы
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("auth/logout")]
        public System.Threading.Tasks.Task Logout()
        {

            return _implementation.LogoutAsync();
        }

        /// <summary>
        /// обновления тоукена доступа
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("auth/refreshtoken")]
        public System.Threading.Tasks.Task<Response2> Refreshtoken([Microsoft.AspNetCore.Mvc.FromBody] Body3 body)
        {

            return _implementation.RefreshtokenAsync(body);
        }

        /// <summary>
        /// сброс пароля на почту или на телефон пользователя
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("auth/reset")]
        public System.Threading.Tasks.Task Reset([Microsoft.AspNetCore.Mvc.FromBody] Body4 body)
        {

            return _implementation.ResetAsync(body);
        }

        /// <summary>
        /// сохранение пароля после сброса
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("auth/reset/save")]
        public System.Threading.Tasks.Task Save([Microsoft.AspNetCore.Mvc.FromBody] Body5 body)
        {

            return _implementation.SaveAsync(body);
        }

        /// <summary>
        /// смена пароля
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("auth/reset/update")]
        public System.Threading.Tasks.Task Update([Microsoft.AspNetCore.Mvc.FromBody] Body6 body)
        {

            return _implementation.UpdateAsync(body);
        }

        /// <summary>
        /// Получаем адрес по координатам
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("services/address")]
        public System.Threading.Tasks.Task<Response3> Address([Microsoft.AspNetCore.Mvc.FromBody] Body7 body)
        {

            return _implementation.AddressAsync(body);
        }

        /// <summary>
        /// Получаем координаты по адресу
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("services/coords")]
        public System.Threading.Tasks.Task<Response4> Coords([Microsoft.AspNetCore.Mvc.FromBody] Body8 body)
        {

            return _implementation.CoordsAsync(body);
        }

        /// <summary>
        /// оповещение пользователей
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("services/mailing")]
        public System.Threading.Tasks.Task MailingPOST(MailingBody body)
        {

            return _implementation.MailingPOSTAsync(body);
        }

        /// <summary>
        /// статистика по категориям за период
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("services/statistic")]
        public System.Threading.Tasks.Task<Response5> Statistic([Microsoft.AspNetCore.Mvc.FromBody] Body9 body)
        {

            return _implementation.StatisticAsync(body);
        }

        /// <summary>
        /// тепловая карта проблемных \ решенных зон за период
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("services/heatmap")]
        public System.Threading.Tasks.Task<Response6> Heatmap([Microsoft.AspNetCore.Mvc.FromBody] Body10 body)
        {

            return _implementation.HeatmapAsync(body);
        }

        /// <summary>
        /// импортирование заявок в формате Excel-файла(ов)
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("services/request/import")]
        public System.Threading.Tasks.Task Import(System.Collections.Generic.IEnumerable<FileParameter> filenames)
        {

            return _implementation.ImportAsync(filenames);
        }

        /// <summary>
        /// экспортирование заявок в формате Excel-файла
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("services/request/export")]
        public System.Threading.Tasks.Task<FileResult> Export([Microsoft.AspNetCore.Mvc.FromBody] Body11 body)
        {

            return _implementation.ExportAsync(body);
        }

        /// <summary>
        /// Находим пользователя по идентификатору
        /// </summary>
        /// <param name="userId">Целочисленный идентификатор пользователя</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("users/{userId}")]
        public System.Threading.Tasks.Task<User> UsersGET(long userId)
        {

            return _implementation.UsersGETAsync(userId);
        }

        /// <summary>
        /// Обновляем пользователя по идентификатору
        /// </summary>
        /// <param name="userId">Целочисленный идентификатор пользователя</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("users/{userId}")]
        public System.Threading.Tasks.Task<User> UsersPUT(long userId, [Microsoft.AspNetCore.Mvc.FromBody] UserForm body)
        {

            return _implementation.UsersPUTAsync(userId, body);
        }

        /// <summary>
        /// Удаляем пользователя по идентификатору
        /// </summary>
        /// <param name="userId">Parameter description in CommonMark or HTML.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("users/{userId}")]
        public System.Threading.Tasks.Task<User> UsersDELETE(long userId)
        {

            return _implementation.UsersDELETEAsync(userId);
        }

        /// <summary>
        /// возвращаем текущего пользователя
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("users/me")]
        public System.Threading.Tasks.Task<User> Me()
        {

            return _implementation.MeAsync();
        }

        /// <summary>
        /// Находим профиль пользователя по идентификатору пользователя
        /// </summary>
        /// <param name="userId">Целочисленный идентификатор пользователя</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("users/{userId}/profile")]
        public System.Threading.Tasks.Task<Profile> Profile(long userId)
        {

            return _implementation.ProfileAsync(userId);
        }

        /// <summary>
        /// Список пользователей
        /// </summary>
        /// <param name="page">идентификатор страницы</param>
        /// <param name="size">размер выдачи на странице</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("users")]
        public System.Threading.Tasks.Task<Response7> UsersGET2([Microsoft.AspNetCore.Mvc.FromQuery] long? page, [Microsoft.AspNetCore.Mvc.FromQuery] long? size)
        {

            return _implementation.UsersGET2Async(page, size);
        }

        /// <summary>
        /// Создаем пользователя
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("users")]
        public System.Threading.Tasks.Task<User> UsersPOST([Microsoft.AspNetCore.Mvc.FromBody] UserForm body)
        {

            return _implementation.UsersPOSTAsync(body);
        }

        /// <summary>
        /// Обновляем роли пользователя
        /// </summary>
        /// <param name="userId">Целочисленный идентификатор пользователя</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("users/{userId}/roles")]
        public System.Threading.Tasks.Task<User> RolesPUT(long userId, [Microsoft.AspNetCore.Mvc.FromBody] Body12 body)
        {

            return _implementation.RolesPUTAsync(userId, body);
        }

        /// <summary>
        /// блокируем пользователя по идентификатору
        /// </summary>
        /// <param name="userId">Целочисленный идентификатор пользователя</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("users/{userId}/blocked")]
        public System.Threading.Tasks.Task<User> Blocked(long userId)
        {

            return _implementation.BlockedAsync(userId);
        }

        /// <summary>
        /// разблокируем пользователя по идентификатору
        /// </summary>
        /// <param name="userId">Целочисленный идентификатор пользователя</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("users/{userId}/unblocked")]
        public System.Threading.Tasks.Task<User> Unblocked(long userId)
        {

            return _implementation.UnblockedAsync(userId);
        }

        /// <summary>
        /// Находим профиль пользователя по идентификатору
        /// </summary>
        /// <param name="profileId">Целочисленный идентификатор профиля пользователя</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("profiles/{profileId}")]
        public System.Threading.Tasks.Task<Profile> ProfilesGET(long profileId)
        {

            return _implementation.ProfilesGETAsync(profileId);
        }

        /// <summary>
        /// Обновляем профиль пользователя по идентификатору
        /// </summary>
        /// <param name="profileId">Целочисленный идентификатор профиля пользователя</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("profiles/{profileId}")]
        public System.Threading.Tasks.Task<Profile> ProfilesPUT(long profileId, [Microsoft.AspNetCore.Mvc.FromBody] ProfileForm body)
        {

            return _implementation.ProfilesPUTAsync(profileId, body);
        }

        /// <summary>
        /// Удаляем пользователя по идентификатору
        /// </summary>
        /// <param name="profileId">Parameter description in CommonMark or HTML.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("profiles/{profileId}")]
        public System.Threading.Tasks.Task<Profile> ProfilesDELETE(long profileId)
        {

            return _implementation.ProfilesDELETEAsync(profileId);
        }

        /// <summary>
        /// Список профилей пользователя
        /// </summary>
        /// <param name="page">идентификатор страницы</param>
        /// <param name="size">размер выдачи на странице</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("profiles")]
        public System.Threading.Tasks.Task<Response8> ProfilesGET2([Microsoft.AspNetCore.Mvc.FromQuery] long? page, [Microsoft.AspNetCore.Mvc.FromQuery] long? size)
        {

            return _implementation.ProfilesGET2Async(page, size);
        }

        /// <summary>
        /// Создаем профиль
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("profiles")]
        public System.Threading.Tasks.Task<Profile> ProfilesPOST([Microsoft.AspNetCore.Mvc.FromBody] ProfileForm body)
        {

            return _implementation.ProfilesPOSTAsync(body);
        }

        /// <summary>
        /// Находим категорию по идентификатору
        /// </summary>
        /// <param name="problemCategoryId">Целочисленный идентификатор категории</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("problem-categories/{problemCategoryId}")]
        public System.Threading.Tasks.Task<User> ProblemCategoriesGET(long problemCategoryId)
        {

            return _implementation.ProblemCategoriesGETAsync(problemCategoryId);
        }

        /// <summary>
        /// Обновляем категорию по идентификатору
        /// </summary>
        /// <param name="problemCategoryId">Целочисленный идентификатор категории</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("problem-categories/{problemCategoryId}")]
        public System.Threading.Tasks.Task<ProblemCategory> ProblemCategoriesPUT(long problemCategoryId, [Microsoft.AspNetCore.Mvc.FromBody] ProblemCategoryForm body)
        {

            return _implementation.ProblemCategoriesPUTAsync(problemCategoryId, body);
        }

        /// <summary>
        /// Удаляем категорию по идентификатору
        /// </summary>
        /// <param name="problemCategoryId">Parameter description in CommonMark or HTML.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("problem-categories/{problemCategoryId}")]
        public System.Threading.Tasks.Task<ProblemCategory> ProblemCategoriesDELETE(long problemCategoryId)
        {

            return _implementation.ProblemCategoriesDELETEAsync(problemCategoryId);
        }

        /// <summary>
        /// Список категорий проблем
        /// </summary>
        /// <param name="page">идентификатор страницы</param>
        /// <param name="size">размер выдачи на странице</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("problem-categories")]
        public System.Threading.Tasks.Task<Response9> ProblemCategoriesGET2([Microsoft.AspNetCore.Mvc.FromQuery] long? page, [Microsoft.AspNetCore.Mvc.FromQuery] long? size)
        {

            return _implementation.ProblemCategoriesGET2Async(page, size);
        }

        /// <summary>
        /// Создаем новую категорию проблем
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("problem-categories")]
        public System.Threading.Tasks.Task<ProblemCategory> ProblemCategoriesPOST([Microsoft.AspNetCore.Mvc.FromBody] ProblemCategoryForm body)
        {

            return _implementation.ProblemCategoriesPOSTAsync(body);
        }

        /// <summary>
        /// Список активных запросов в категории
        /// </summary>
        /// <param name="problemCategoryId">Целочисленный идентификатор категории</param>
        /// <param name="page">идентификатор страницы</param>
        /// <param name="size">размер выдачи на странице</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("problem-categories/{problemCategoryId}/active-requests")]
        public System.Threading.Tasks.Task<Response10> ActiveRequests(long problemCategoryId, [Microsoft.AspNetCore.Mvc.FromQuery] long? page, [Microsoft.AspNetCore.Mvc.FromQuery] long? size)
        {

            return _implementation.ActiveRequestsAsync(problemCategoryId, page, size);
        }

        /// <summary>
        /// Список выполненных запросов в категории
        /// </summary>
        /// <param name="problemCategoryId">Целочисленный идентификатор категории</param>
        /// <param name="page">идентификатор страницы</param>
        /// <param name="size">размер выдачи на странице</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("problem-categories/{problemCategoryId}/completed-requests")]
        public System.Threading.Tasks.Task<Response11> CompletedRequests(long problemCategoryId, [Microsoft.AspNetCore.Mvc.FromQuery] long? page, [Microsoft.AspNetCore.Mvc.FromQuery] long? size)
        {

            return _implementation.CompletedRequestsAsync(problemCategoryId, page, size);
        }

        /// <summary>
        /// Список архивных запросов в категории
        /// </summary>
        /// <param name="problemCategoryId">Целочисленный идентификатор категории</param>
        /// <param name="page">идентификатор страницы</param>
        /// <param name="size">размер выдачи на странице</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("problem-categories/{problemCategoryId}/archive-requests")]
        public System.Threading.Tasks.Task<Response12> ArchiveRequests(long problemCategoryId, [Microsoft.AspNetCore.Mvc.FromQuery] long? page, [Microsoft.AspNetCore.Mvc.FromQuery] long? size)
        {

            return _implementation.ArchiveRequestsAsync(problemCategoryId, page, size);
        }

        /// <summary>
        /// Находим заявку по идентификатору
        /// </summary>
        /// <param name="requestId">Целочисленный идентификатор заявки</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("requests/{requestId}")]
        public System.Threading.Tasks.Task<Request> RequestsGET(long requestId)
        {

            return _implementation.RequestsGETAsync(requestId);
        }

        /// <summary>
        /// Обновляем заявку по идентификатору
        /// </summary>
        /// <param name="requestId">Целочисленный идентификатор заявки</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("requests/{requestId}")]
        public System.Threading.Tasks.Task<Request> RequestsPUT(long requestId, Microsoft.AspNetCore.Http.IFormFile body)
        {

            return _implementation.RequestsPUTAsync(requestId, body);
        }

        /// <summary>
        /// Удаляем заявку по идентификатору
        /// </summary>
        /// <param name="requestId">Parameter description in CommonMark or HTML.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("requests/{requestId}")]
        public System.Threading.Tasks.Task<Request> RequestsDELETE(long requestId)
        {

            return _implementation.RequestsDELETEAsync(requestId);
        }

        /// <summary>
        /// Список заявок
        /// </summary>
        /// <param name="page">идентификатор страницы</param>
        /// <param name="size">размер выдачи на странице</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("requests")]
        public System.Threading.Tasks.Task<Response13> RequestsGET2([Microsoft.AspNetCore.Mvc.FromQuery] long? page, [Microsoft.AspNetCore.Mvc.FromQuery] long? size)
        {

            return _implementation.RequestsGET2Async(page, size);
        }

        /// <summary>
        /// Создаем заявку
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("requests")]
        public System.Threading.Tasks.Task<Request> RequestsPOST(Microsoft.AspNetCore.Http.IFormFile body)
        {

            return _implementation.RequestsPOSTAsync(body);
        }

        /// <summary>
        /// Подбор заявок в радиусе
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("requests/in-range")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Request>> InRange([Microsoft.AspNetCore.Mvc.FromBody] Body13 body)
        {

            return _implementation.InRangeAsync(body);
        }

        /// <summary>
        /// модификация рейтинга заявки (+-)
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("requests/rating")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Request>> Rating([Microsoft.AspNetCore.Mvc.FromBody] Body14 body)
        {

            return _implementation.RatingAsync(body);
        }

        /// <summary>
        /// формируем заявку в виде pdf
        /// </summary>
        /// <param name="requestId">Целочисленный идентификатор заявки</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("requests/{requestId}/pdf")]
        public System.Threading.Tasks.Task<FileResult> Pdf(long requestId)
        {

            return _implementation.PdfAsync(requestId);
        }

        /// <summary>
        /// отмечаем просмотр заявки по идентификатору для текущего авторизованного пользователя
        /// </summary>
        /// <param name="requestId">Целочисленный идентификатор заявки</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("requests/{requestId}/watch")]
        public System.Threading.Tasks.Task Watch(long requestId)
        {

            return _implementation.WatchAsync(requestId);
        }

        /// <summary>
        /// Находим исполнителя по идентификатору
        /// </summary>
        /// <param name="contractorId">Целочисленный идентификатор</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("contractors/{contractorId}")]
        public System.Threading.Tasks.Task<Contractor> ContractorsGET(long contractorId)
        {

            return _implementation.ContractorsGETAsync(contractorId);
        }

        /// <summary>
        /// Обновляем исполнителя по идентификатору
        /// </summary>
        /// <param name="contractorId">Целочисленный идентификатор исполнителя</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("contractors/{contractorId}")]
        public System.Threading.Tasks.Task<Contractor> ContractorsPUT(long contractorId, [Microsoft.AspNetCore.Mvc.FromBody] ContractorForm body)
        {

            return _implementation.ContractorsPUTAsync(contractorId, body);
        }

        /// <summary>
        /// Удаляем исполнителя по идентификатору
        /// </summary>
        /// <param name="contractorId">Parameter description in CommonMark or HTML.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("contractors/{contractorId}")]
        public System.Threading.Tasks.Task<Contractor> ContractorsDELETE(long contractorId)
        {

            return _implementation.ContractorsDELETEAsync(contractorId);
        }

        /// <summary>
        /// Список архивных заявок по исполнительному органу
        /// </summary>
        /// <param name="contractorId">Целочисленный идентификатор</param>
        /// <param name="page">идентификатор страницы</param>
        /// <param name="size">размер выдачи на странице</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("contractors/{contractorId}/requests/archive")]
        public System.Threading.Tasks.Task<Response14> Archive(long contractorId, [Microsoft.AspNetCore.Mvc.FromQuery] long? page, [Microsoft.AspNetCore.Mvc.FromQuery] long? size)
        {

            return _implementation.ArchiveAsync(contractorId, page, size);
        }

        /// <summary>
        /// Список активных заявок по исполнительному органу
        /// </summary>
        /// <param name="contractorId">Целочисленный идентификатор</param>
        /// <param name="page">идентификатор страницы</param>
        /// <param name="size">размер выдачи на странице</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("contractors/{contractorId}/requests/active")]
        public System.Threading.Tasks.Task<Response15> Active(long contractorId, [Microsoft.AspNetCore.Mvc.FromQuery] long? page, [Microsoft.AspNetCore.Mvc.FromQuery] long? size)
        {

            return _implementation.ActiveAsync(contractorId, page, size);
        }

        /// <summary>
        /// Находим активные задачи для выбранного исполнительного \ контролирующего органа
        /// </summary>
        /// <param name="contractorId">Целочисленный идентификатор</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("contractors/{contractorId}/tasks")]
        public System.Threading.Tasks.Task<ContractorTask> TasksGET(long contractorId)
        {

            return _implementation.TasksGETAsync(contractorId);
        }

        /// <summary>
        /// Список профилей исполнительных органов
        /// </summary>
        /// <param name="page">идентификатор страницы</param>
        /// <param name="size">размер выдачи на странице</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("contractors")]
        public System.Threading.Tasks.Task<Response16> ContractorsGET2([Microsoft.AspNetCore.Mvc.FromQuery] long? page, [Microsoft.AspNetCore.Mvc.FromQuery] long? size)
        {

            return _implementation.ContractorsGET2Async(page, size);
        }

        /// <summary>
        /// Создаем профиль исполнительного органа
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("contractors")]
        public System.Threading.Tasks.Task<Contractor> ContractorsPOST([Microsoft.AspNetCore.Mvc.FromBody] ContractorForm body)
        {

            return _implementation.ContractorsPOSTAsync(body);
        }

        /// <summary>
        /// Находим черновик заявки по идентификатору
        /// </summary>
        /// <param name="storedRequestId">Целочисленный идентификатор заявки</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("stored-requests/{storedRequestId}")]
        public System.Threading.Tasks.Task<StoredRequest> StoredRequestsGET(long storedRequestId)
        {

            return _implementation.StoredRequestsGETAsync(storedRequestId);
        }

        /// <summary>
        /// Обновляем черновик заявки по идентификатору
        /// </summary>
        /// <param name="storedRequestId">Целочисленный идентификатор черновика заявки</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("stored-requests/{storedRequestId}")]
        public System.Threading.Tasks.Task<StoredRequest> StoredRequestsPUT(long storedRequestId, [Microsoft.AspNetCore.Mvc.FromBody] StoredRequestForm body)
        {

            return _implementation.StoredRequestsPUTAsync(storedRequestId, body);
        }

        /// <summary>
        /// Удаляем черновик заявки по идентификатору
        /// </summary>
        /// <param name="storedRequestId">Parameter description in CommonMark or HTML.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("stored-requests/{storedRequestId}")]
        public System.Threading.Tasks.Task<StoredRequest> StoredRequestsDELETE(long storedRequestId)
        {

            return _implementation.StoredRequestsDELETEAsync(storedRequestId);
        }

        /// <summary>
        /// Список черновиков заявок
        /// </summary>
        /// <param name="page">идентификатор страницы</param>
        /// <param name="size">размер выдачи на странице</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("stored-requests")]
        public System.Threading.Tasks.Task<Response17> StoredRequestsGET2([Microsoft.AspNetCore.Mvc.FromQuery] long? page, [Microsoft.AspNetCore.Mvc.FromQuery] long? size)
        {

            return _implementation.StoredRequestsGET2Async(page, size);
        }

        /// <summary>
        /// Создаем черновик заявки.
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("stored-requests")]
        public System.Threading.Tasks.Task<StoredRequest> StoredRequestsPOST([Microsoft.AspNetCore.Mvc.FromBody] StoredRequestForm body)
        {

            return _implementation.StoredRequestsPOSTAsync(body);
        }

        /// <summary>
        /// Находим роль по идентификатору
        /// </summary>
        /// <param name="roleId">Целочисленный идентификатор заявки</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("roles/{roleId}")]
        public System.Threading.Tasks.Task<Role> RolesGET(long roleId)
        {

            return _implementation.RolesGETAsync(roleId);
        }

        /// <summary>
        /// Обновляем роль по идентификатору
        /// </summary>
        /// <param name="roleId">Целочисленный идентификатор роли</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("roles/{roleId}")]
        public System.Threading.Tasks.Task<Role> RolesPUT2(long roleId, [Microsoft.AspNetCore.Mvc.FromBody] RoleForm body)
        {

            return _implementation.RolesPUT2Async(roleId, body);
        }

        /// <summary>
        /// Удаляем роль по идентификатору
        /// </summary>
        /// <param name="roleId">Parameter description in CommonMark or HTML.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("roles/{roleId}")]
        public System.Threading.Tasks.Task<Role> RolesDELETE(long roleId)
        {

            return _implementation.RolesDELETEAsync(roleId);
        }

        /// <summary>
        /// Список всех ролей
        /// </summary>
        /// <param name="page">идентификатор страницы</param>
        /// <param name="size">размер выдачи на странице</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("roles")]
        public System.Threading.Tasks.Task<Response18> RolesGET2([Microsoft.AspNetCore.Mvc.FromQuery] long? page, [Microsoft.AspNetCore.Mvc.FromQuery] long? size)
        {

            return _implementation.RolesGET2Async(page, size);
        }

        /// <summary>
        /// Создаем новую роль
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("roles")]
        public System.Threading.Tasks.Task<Role> RolesPOST([Microsoft.AspNetCore.Mvc.FromBody] RoleForm body)
        {

            return _implementation.RolesPOSTAsync(body);
        }

        /// <summary>
        /// Находим рассылку по идентификатору
        /// </summary>
        /// <param name="mailingId">Целочисленный идентификатор записи</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("mailing/{mailingId}")]
        public System.Threading.Tasks.Task<MailingQuery> MailingGET(long mailingId)
        {

            return _implementation.MailingGETAsync(mailingId);
        }

        /// <summary>
        /// Обновляем черновик заявки по идентификатору
        /// </summary>
        /// <param name="mailingId">Целочисленный идентификатор</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("mailing/{mailingId}")]
        public System.Threading.Tasks.Task<MailingQuery> MailingPUT(long mailingId, [Microsoft.AspNetCore.Mvc.FromBody] MailingQueryForm body)
        {

            return _implementation.MailingPUTAsync(mailingId, body);
        }

        /// <summary>
        /// удаляем из рассылки по идентификатору
        /// </summary>
        /// <param name="mailingId">Parameter description in CommonMark or HTML.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("mailing/{mailingId}")]
        public System.Threading.Tasks.Task<MailingQuery> MailingDELETE(long mailingId)
        {

            return _implementation.MailingDELETEAsync(mailingId);
        }

        /// <summary>
        /// Список всех рассылок
        /// </summary>
        /// <param name="page">идентификатор страницы</param>
        /// <param name="size">размер выдачи на странице</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("mailing")]
        public System.Threading.Tasks.Task<Response19> MailingGET2([Microsoft.AspNetCore.Mvc.FromQuery] long? page, [Microsoft.AspNetCore.Mvc.FromQuery] long? size)
        {

            return _implementation.MailingGET2Async(page, size);
        }

        /// <summary>
        /// Создаем рассылку
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("mailing")]
        public System.Threading.Tasks.Task<MailingQuery> MailingPOST2([Microsoft.AspNetCore.Mvc.FromBody] MailingQueryForm body)
        {

            return _implementation.MailingPOST2Async(body);
        }

        /// <summary>
        /// запуск рассылок в CRON
        /// </summary>
        /// <param name="page">идентификатор страницы</param>
        /// <param name="size">размер выдачи на странице</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("mailing/handler")]
        public System.Threading.Tasks.Task Handler([Microsoft.AspNetCore.Mvc.FromQuery] long? page, [Microsoft.AspNetCore.Mvc.FromQuery] long? size)
        {

            return _implementation.HandlerAsync(page, size);
        }

        /// <summary>
        /// Находим задачу по по идентификатору
        /// </summary>
        /// <param name="taskId">Целочисленный идентификатор записи</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("tasks/{taskId}")]
        public System.Threading.Tasks.Task<ContractorTask> TasksGET2(long taskId)
        {

            return _implementation.TasksGET2Async(taskId);
        }

        /// <summary>
        /// Обновляем заявку по идентификатору
        /// </summary>
        /// <param name="taskId">Целочисленный идентификатор</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("tasks/{taskId}")]
        public System.Threading.Tasks.Task<ContractorTask> TasksPUT(long taskId, [Microsoft.AspNetCore.Mvc.FromBody] ContractorTaskForm body)
        {

            return _implementation.TasksPUTAsync(taskId, body);
        }

        /// <summary>
        /// удаляем задачу по идентификатору
        /// </summary>
        /// <param name="taskId">Parameter description in CommonMark or HTML.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("tasks/{taskId}")]
        public System.Threading.Tasks.Task<ContractorTask> TasksDELETE(long taskId)
        {

            return _implementation.TasksDELETEAsync(taskId);
        }

        /// <summary>
        /// Список всех задач
        /// </summary>
        /// <param name="page">идентификатор страницы</param>
        /// <param name="size">размер выдачи на странице</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("tasks")]
        public System.Threading.Tasks.Task<Response20> TasksGET3([Microsoft.AspNetCore.Mvc.FromQuery] long? page, [Microsoft.AspNetCore.Mvc.FromQuery] long? size)
        {

            return _implementation.TasksGET3Async(page, size);
        }

        /// <summary>
        /// Создаем новую задачу для исполнительного \ контролирующего органа
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("tasks")]
        public System.Threading.Tasks.Task<ContractorTask> TasksPOST([Microsoft.AspNetCore.Mvc.FromBody] ContractorTaskForm body)
        {

            return _implementation.TasksPOSTAsync(body);
        }

        /// <summary>
        /// Находим историю по идентификатору
        /// </summary>
        /// <param name="storyId">Целочисленный идентификатор истории</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("stories/{storyId}")]
        public System.Threading.Tasks.Task<Story> StoriesGET(long storyId)
        {

            return _implementation.StoriesGETAsync(storyId);
        }

        /// <summary>
        /// Обновляем историю по идентификатору
        /// </summary>
        /// <param name="storyId">Целочисленный идентификатор истории</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("stories/{storyId}")]
        public System.Threading.Tasks.Task<Story> StoriesPUT(long storyId, [Microsoft.AspNetCore.Mvc.FromBody] StoryForm body)
        {

            return _implementation.StoriesPUTAsync(storyId, body);
        }

        /// <summary>
        /// Удаляем историю по идентификатору
        /// </summary>
        /// <param name="storyId">Parameter description in CommonMark or HTML.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("stories/{storyId}")]
        public System.Threading.Tasks.Task<Role> StoriesDELETE(long storyId)
        {

            return _implementation.StoriesDELETEAsync(storyId);
        }

        /// <summary>
        /// Устанавливает просмотр истории для текущего пользователя
        /// </summary>
        /// <param name="storyId">Целочисленный идентификатор истории</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("stories/{storyId}/watch")]
        public System.Threading.Tasks.Task Watch2(long storyId)
        {

            return _implementation.Watch2Async(storyId);
        }

        /// <summary>
        /// Список всех историй
        /// </summary>
        /// <param name="page">идентификатор страницы</param>
        /// <param name="size">размер выдачи на странице</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("stories")]
        public System.Threading.Tasks.Task<Response21> StoriesGET2([Microsoft.AspNetCore.Mvc.FromQuery] long? page, [Microsoft.AspNetCore.Mvc.FromQuery] long? size)
        {

            return _implementation.StoriesGET2Async(page, size);
        }

        /// <summary>
        /// Создаем новую историю
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("stories")]
        public System.Threading.Tasks.Task<Story> StoriesPOST([Microsoft.AspNetCore.Mvc.FromBody] StoryForm body)
        {

            return _implementation.StoriesPOSTAsync(body);
        }

        /// <summary>
        /// Находим регион по идентификатору
        /// </summary>
        /// <param name="regionId">Целочисленный идентификатор истории</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("regions/{regionId}")]
        public System.Threading.Tasks.Task<Region> RegionsGET(long regionId)
        {

            return _implementation.RegionsGETAsync(regionId);
        }

        /// <summary>
        /// Обновляем регион по идентификатору
        /// </summary>
        /// <param name="regionId">Целочисленный идентификатор регион</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("regions/{regionId}")]
        public System.Threading.Tasks.Task<Region> RegionsPUT(long regionId, [Microsoft.AspNetCore.Mvc.FromBody] RegionForm body)
        {

            return _implementation.RegionsPUTAsync(regionId, body);
        }

        /// <summary>
        /// Удаляем регион по идентификатору
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("regions/{regionId}")]
        public System.Threading.Tasks.Task<Region> RegionsDELETE(long regionId)
        {

            return _implementation.RegionsDELETEAsync(regionId);
        }

        /// <summary>
        /// Список всех регионов
        /// </summary>
        /// <param name="page">идентификатор страницы</param>
        /// <param name="size">размер выдачи на странице</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("regions")]
        public System.Threading.Tasks.Task<Response22> RegionsGET2([Microsoft.AspNetCore.Mvc.FromQuery] long? page, [Microsoft.AspNetCore.Mvc.FromQuery] long? size)
        {

            return _implementation.RegionsGET2Async(page, size);
        }

        /// <summary>
        /// Создаем новуый регион
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("regions")]
        public System.Threading.Tasks.Task<Region> RegionsPOST([Microsoft.AspNetCore.Mvc.FromBody] RegionForm body)
        {

            return _implementation.RegionsPOSTAsync(body);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Error
    {
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; } = "Error";

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; } = "Error";

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(100, 600)]
        public int Code { get; set; } = 404;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class User
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; set; }

        [Newtonsoft.Json.JsonProperty("profile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Profile Profile { get; set; }

        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Role> Roles { get; set; }

        [Newtonsoft.Json.JsonProperty("approve_sms_code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Approve_sms_code { get; set; }

        [Newtonsoft.Json.JsonProperty("approve_email_code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Approve_email_code { get; set; }

        [Newtonsoft.Json.JsonProperty("sms_approved_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sms_approved_at { get; set; }

        [Newtonsoft.Json.JsonProperty("email_approved_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email_approved_at { get; set; }

        [Newtonsoft.Json.JsonProperty("blocked_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Blocked_at { get; set; }

        [Newtonsoft.Json.JsonProperty("deleted_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Deleted_at { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class UserForm
    {
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Role
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// Роли пользователя:
        /// <br/>  * `GUEST` - гость (не используется)
        /// <br/>  * `USER` - польователь системы
        /// <br/>  * `ADMINISTRATOR` - администратор системы
        /// <br/>  * `CONTRACTOR` - исполнительный или контролирующий орган
        /// <br/>  * `CONTRACTOR_EXECUTIVE` - исполнительный орган
        /// <br/>  * `CONTRACTOR_SUPERVISING` - контролирующий орган
        /// <br/>  * `TECHNICAL` - технический пользователь системы
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RoleTitle Title { get; set; }

        /// <summary>
        /// мнемоническое имя роли
        /// </summary>
        [Newtonsoft.Json.JsonProperty("slug", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Slug { get; set; } = "guest";

        [Newtonsoft.Json.JsonProperty("deleted_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Deleted_at { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class RoleForm
    {
        /// <summary>
        /// Роли пользователя:
        /// <br/>  * `GUEST` - гость (не используется)
        /// <br/>  * `USER` - польователь системы
        /// <br/>  * `ADMINISTRATOR` - администратор системы
        /// <br/>  * `CONTRACTOR` - исполнительный или контролирующий орган
        /// <br/>  * `CONTRACTOR_EXECUTIVE` - исполнительный орган
        /// <br/>  * `CONTRACTOR_SUPERVISING` - контролирующий орган
        /// <br/>  * `TECHNICAL` - технический пользователь системы
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RoleFormTitle Title { get; set; }

        /// <summary>
        /// мнемоническое имя роли
        /// </summary>
        [Newtonsoft.Json.JsonProperty("slug", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Slug { get; set; } = "guest";

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Profile
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("user_id", Required = Newtonsoft.Json.Required.Always)]
        public long User_id { get; set; }

        [Newtonsoft.Json.JsonProperty("full_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Full_name { get; set; }

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location { get; set; }

        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Phone { get; set; }

        /// <summary>
        /// персональный рейтинг пользователя
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Rating { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("requests", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Request> Requests { get; set; }

        [Newtonsoft.Json.JsonProperty("stored_requests", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<StoredRequest> Stored_requests { get; set; }

        [Newtonsoft.Json.JsonProperty("is_notification_email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_notification_email { get; set; } = false;

        [Newtonsoft.Json.JsonProperty("is_notification_sms", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_notification_sms { get; set; } = false;

        [Newtonsoft.Json.JsonProperty("is_anonymous_requests", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_anonymous_requests { get; set; } = false;

        [Newtonsoft.Json.JsonProperty("deleted_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Deleted_at { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ProfileForm
    {
        [Newtonsoft.Json.JsonProperty("user_id", Required = Newtonsoft.Json.Required.Always)]
        public long User_id { get; set; }

        [Newtonsoft.Json.JsonProperty("full_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Full_name { get; set; }

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location { get; set; }

        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("is_notification_email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_notification_email { get; set; } = false;

        [Newtonsoft.Json.JsonProperty("is_notification_sms", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_notification_sms { get; set; } = false;

        [Newtonsoft.Json.JsonProperty("is_anonymous_requests", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_anonymous_requests { get; set; } = false;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Request
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// идентификатор более ранней заявки по схожей проблеме
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parent_request_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Parent_request_id { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Источник заявки:
        /// <br/>  * `LANDING` - с рекламной страницы
        /// <br/>  * `VK` - с вк бота
        /// <br/>  * `OPERATOR` - добавлено оператором из административной панели
        /// <br/>  * `EXCEL` - массовое добавление из эксель файла
        /// <br/>  * `TELEGRAM` - с телеграм бота
        /// <br/>  * `ANDROID` - с андройд приложения
        /// <br/>  * `IOS` - а ios приложения
        /// <br/>  * `OTHER` - с других источников
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RequestSource Source { get; set; }

        [Newtonsoft.Json.JsonProperty("problem_categories", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ProblemCategory> Problem_categories { get; set; }

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location { get; set; }

        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Latitude { get; set; }

        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Longitude { get; set; }

        /// <summary>
        /// фиксированный рейтинг заявки, указывается администратором для принудительного повышения
        /// </summary>
        [Newtonsoft.Json.JsonProperty("base_rating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Base_rating { get; set; } = 0;

        /// <summary>
        /// суммарный рейтинг заявки и всех смежных с ней заявок
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Rating { get; set; }

        /// <summary>
        /// число просмотров заявки (расчетный параметр)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("watch_count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Watch_count { get; set; }

        /// <summary>
        /// Тип заявки:
        /// <br/> * `IN PROCESSING` - новая заявка
        /// <br/> * `IN CONSIDERATION` - заявка на рассмотрении
        /// <br/> * `IN EXECUTION` - заявка выполняется
        /// <br/> * `IN EXECUTION CHECK` - проверка выполнения заявки
        /// <br/> * `COMPLETED` - выполненная заявка
        /// <br/> * `ARCHIVED` - заявка находится в архиве
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RequestStatus Status { get; set; } = CityWatch.Api.Controllers.RequestStatus.IN_PROCESSING;

        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<MediaContent> Attachments { get; set; }

        /// <summary>
        /// сохранение данных профиля на момент формирования заявки
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stored_profile_data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Stored_profile_data Stored_profile_data { get; set; }

        /// <summary>
        /// дата начала рассмотрения заявки
        /// </summary>
        [Newtonsoft.Json.JsonProperty("request_consideration_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Request_consideration_at { get; set; }

        /// <summary>
        /// дата начала выполнения работ по заявке
        /// </summary>
        [Newtonsoft.Json.JsonProperty("begin_request_execution_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Begin_request_execution_at { get; set; }

        /// <summary>
        /// дата завершения выполнения работ по заявке
        /// </summary>
        [Newtonsoft.Json.JsonProperty("complete_request_execution_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Complete_request_execution_at { get; set; }

        /// <summary>
        /// дата финальной проверки выполнения
        /// </summary>
        [Newtonsoft.Json.JsonProperty("request_status_checked_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Request_status_checked_at { get; set; }

        [Newtonsoft.Json.JsonProperty("is_moderated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_moderated { get; set; } = true;

        [Newtonsoft.Json.JsonProperty("moderator_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Moderator_id { get; set; }

        [Newtonsoft.Json.JsonProperty("deleted_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Deleted_at { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class RequestForm
    {
        /// <summary>
        /// идентификатор более ранней заявки по схожей проблеме
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parent_request_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Parent_request_id { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>
        /// Источник заявки:
        /// <br/>  * `LANDING` - с рекламной страницы
        /// <br/>  * `VK` - с вк бота
        /// <br/>  * `OPERATOR` - добавлено оператором из административной панели
        /// <br/>  * `EXCEL` - массовое добавление из эксель файла
        /// <br/>  * `TELEGRAM` - с телеграм бота
        /// <br/>  * `ANDROID` - с андройд приложения
        /// <br/>  * `IOS` - а ios приложения
        /// <br/>  * `OTHER` - с других источников
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RequestFormSource Source { get; set; }

        [Newtonsoft.Json.JsonProperty("problem_categories", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<int> Problem_categories { get; set; } = new System.Collections.Generic.List<int>();

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location { get; set; }

        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.Always)]
        public double Latitude { get; set; }

        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.Always)]
        public double Longitude { get; set; }

        /// <summary>
        /// фиксированный рейтинг заявки, указывается администратором для принудительного повышения
        /// </summary>
        [Newtonsoft.Json.JsonProperty("base_rating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Base_rating { get; set; } = 0;

        /// <summary>
        /// Тип заявки:
        /// <br/> * `IN PROCESSING` - новая заявка
        /// <br/> * `IN CONSIDERATION` - заявка на рассмотрении
        /// <br/> * `IN EXECUTION` - заявка выполняется
        /// <br/> * `IN EXECUTION CHECK` - проверка выполнения заявки
        /// <br/> * `COMPLETED` - выполненная заявка
        /// <br/> * `ARCHIVED` - заявка находится в архиве
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RequestFormStatus Status { get; set; } = CityWatch.Api.Controllers.RequestFormStatus.IN_PROCESSING;

        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<MediaContent> Attachments { get; set; }

        /// <summary>
        /// дата начала рассмотрения заявки
        /// </summary>
        [Newtonsoft.Json.JsonProperty("request_consideration_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Request_consideration_at { get; set; }

        /// <summary>
        /// дата начала выполнения работ по заявке
        /// </summary>
        [Newtonsoft.Json.JsonProperty("begin_request_execution_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Begin_request_execution_at { get; set; }

        /// <summary>
        /// дата завершения выполнения работ по заявке
        /// </summary>
        [Newtonsoft.Json.JsonProperty("complete_request_execution_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Complete_request_execution_at { get; set; }

        /// <summary>
        /// дата финальной проверки выполнения
        /// </summary>
        [Newtonsoft.Json.JsonProperty("request_status_checked_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Request_status_checked_at { get; set; }

        [Newtonsoft.Json.JsonProperty("is_moderated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_moderated { get; set; } = true;

        [Newtonsoft.Json.JsonProperty("moderator_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Moderator_id { get; set; }

        [Newtonsoft.Json.JsonProperty("filenames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<byte[]> Filenames { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class StoredRequest
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// идентификатор пользователя, который сохраняет заявку
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long User_id { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("problem_categories", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ProblemCategory> Problem_categories { get; set; }

        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Latitude { get; set; }

        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Longitude { get; set; }

        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<MediaContent> Attachments { get; set; }

        [Newtonsoft.Json.JsonProperty("deleted_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Deleted_at { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class StoredRequestForm
    {
        /// <summary>
        /// идентификатор пользователя, который сохраняет заявку
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long User_id { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("problem_categories", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<ProblemCategory> Problem_categories { get; set; } = new System.Collections.Generic.List<ProblemCategory>();

        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.Always)]
        public double Latitude { get; set; }

        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.Always)]
        public double Longitude { get; set; }

        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<MediaContent> Attachments { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ProblemCategory
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("mnemonic_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mnemonic_name { get; set; }

        [Newtonsoft.Json.JsonProperty("hash_tag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hash_tag { get; set; }

        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Icon { get; set; }

        /// <summary>
        /// Приоритетный рейтинг категории
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Rating { get; set; }

        /// <summary>
        /// Доступность раздела
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is_active", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_active { get; set; }

        /// <summary>
        /// Видимость раздела в общей выдаче
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is_visible", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_visible { get; set; }

        [Newtonsoft.Json.JsonProperty("deleted_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Deleted_at { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ProblemCategoryForm
    {
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("mnemonic_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Mnemonic_name { get; set; }

        [Newtonsoft.Json.JsonProperty("hash_tag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Hash_tag { get; set; }

        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Icon { get; set; }

        /// <summary>
        /// Приоритетный рейтинг категории
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Rating { get; set; }

        /// <summary>
        /// Доступность раздела
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is_active", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_active { get; set; }

        /// <summary>
        /// Видимость раздела в общей выдаче
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is_visible", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_visible { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class MediaContent
    {
        /// <summary>
        /// Тип медиа данных:
        /// <br/> * `IMAGE` - изображение
        /// <br/> * `VIDEO` - видео
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MediaContentType Type { get; set; } = CityWatch.Api.Controllers.MediaContentType.IMAGE;

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class PaginateObject
    {
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("current_page", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Current_page { get; set; }

        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int From { get; set; }

        [Newtonsoft.Json.JsonProperty("last_page", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Last_page { get; set; }

        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        [Newtonsoft.Json.JsonProperty("per_page", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Per_page { get; set; }

        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int To { get; set; }

        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Total { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Contractor
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// Мнемоническое имя
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mnemonic_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mnemonic_name { get; set; }

        /// <summary>
        /// Название исполнительного органа
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// Описание исполнительного органа
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Ответственное лицо от органа исполнения  проверки
        /// </summary>
        [Newtonsoft.Json.JsonProperty("responsible_person", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Responsible_person { get; set; }

        /// <summary>
        /// Изображение (аватар исполнительного органа)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Image { get; set; }

        [Newtonsoft.Json.JsonProperty("hash_tag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hash_tag { get; set; }

        [Newtonsoft.Json.JsonProperty("contact_phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contact_phone { get; set; }

        [Newtonsoft.Json.JsonProperty("contact_email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contact_email { get; set; }

        /// <summary>
        /// электронная почта отвественного министерства
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pre_controller_email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pre_controller_email { get; set; }

        /// <summary>
        /// идентификатор телеграм канала исполнительного органа
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telegram_chat_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Telegram_chat_id { get; set; }

        /// <summary>
        /// Ссылка на веб-ресурс службы
        /// </summary>
        [Newtonsoft.Json.JsonProperty("public_website", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Public_website { get; set; }

        /// <summary>
        /// дополнительная информация о контролирующем \ исполнительном органе
        /// </summary>
        [Newtonsoft.Json.JsonProperty("more_info", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string More_info { get; set; }

        /// <summary>
        /// Выбор типа организации:
        /// <br/> * `EXECUTIVE` - исполнительные органы
        /// <br/> * `SUPERVISING` - контролирующие органы
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContractorType Type { get; set; } = CityWatch.Api.Controllers.ContractorType.EXECUTIVE;

        [Newtonsoft.Json.JsonProperty("schedule", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Schedule> Schedule { get; set; }

        /// <summary>
        /// категории проблем, за которые ответственный орган
        /// </summary>
        [Newtonsoft.Json.JsonProperty("problem_categories", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ProblemCategory> Problem_categories { get; set; }

        /// <summary>
        /// Статус видимости организации в общем списке
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is_active", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_active { get; set; } = false;

        /// <summary>
        /// Генерировать дневные отчеты
        /// </summary>
        [Newtonsoft.Json.JsonProperty("generate_daily_report", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Generate_daily_report { get; set; } = false;

        /// <summary>
        /// информировать по электронной почте
        /// </summary>
        [Newtonsoft.Json.JsonProperty("need_inform_by_email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Need_inform_by_email { get; set; } = false;

        /// <summary>
        /// информировать по sms
        /// </summary>
        [Newtonsoft.Json.JsonProperty("need_inform_by_sms", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Need_inform_by_sms { get; set; } = false;

        [Newtonsoft.Json.JsonProperty("deleted_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Deleted_at { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ContractorForm
    {
        /// <summary>
        /// Мнемоническое имя
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mnemonic_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Mnemonic_name { get; set; }

        /// <summary>
        /// Название исполнительного органа
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }

        /// <summary>
        /// Описание исполнительного органа
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>
        /// Ответственное лицо от органа исполнения  проверки
        /// </summary>
        [Newtonsoft.Json.JsonProperty("responsible_person", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Responsible_person { get; set; }

        /// <summary>
        /// Изображение (аватар исполнительного органа)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Image { get; set; }

        [Newtonsoft.Json.JsonProperty("hash_tag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Hash_tag { get; set; }

        [Newtonsoft.Json.JsonProperty("contact_phone", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Contact_phone { get; set; }

        [Newtonsoft.Json.JsonProperty("contact_email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Contact_email { get; set; }

        /// <summary>
        /// электронная почта отвественного министерства
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pre_controller_email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pre_controller_email { get; set; }

        /// <summary>
        /// идентификатор телеграм канала исполнительного органа
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telegram_chat_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Telegram_chat_id { get; set; }

        /// <summary>
        /// Ссылка на веб-ресурс службы
        /// </summary>
        [Newtonsoft.Json.JsonProperty("public_website", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Public_website { get; set; }

        /// <summary>
        /// дополнительная информация о контролирующем \ исполнительном органе
        /// </summary>
        [Newtonsoft.Json.JsonProperty("more_info", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string More_info { get; set; }

        /// <summary>
        /// Выбор типа организации:
        /// <br/> * `EXECUTIVE` - исполнительные органы
        /// <br/> * `SUPERVISING` - контролирующие органы
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContractorFormType Type { get; set; } = CityWatch.Api.Controllers.ContractorFormType.EXECUTIVE;

        [Newtonsoft.Json.JsonProperty("schedule", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<Schedule2> Schedule { get; set; } = new System.Collections.Generic.List<Schedule2>();

        [Newtonsoft.Json.JsonProperty("problem_categories", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<int> Problem_categories { get; set; } = new System.Collections.Generic.List<int>();

        /// <summary>
        /// Статус видимости организации в общем списке
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is_active", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_active { get; set; } = false;

        /// <summary>
        /// Генерировать дневные отчеты
        /// </summary>
        [Newtonsoft.Json.JsonProperty("generate_daily_report", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Generate_daily_report { get; set; } = false;

        /// <summary>
        /// информировать по электронной почте
        /// </summary>
        [Newtonsoft.Json.JsonProperty("need_inform_by_email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Need_inform_by_email { get; set; } = false;

        /// <summary>
        /// информировать по sms
        /// </summary>
        [Newtonsoft.Json.JsonProperty("need_inform_by_sms", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Need_inform_by_sms { get; set; } = false;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ContractorTask
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("request_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Request_id { get; set; }

        [Newtonsoft.Json.JsonProperty("contractor_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Contractor_id { get; set; }

        [Newtonsoft.Json.JsonProperty("request", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Request Request { get; set; }

        [Newtonsoft.Json.JsonProperty("contractor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contractor Contractor { get; set; }

        /// <summary>
        /// Предполагаемая дата проведения работ  контроля 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimated_task_processing_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Estimated_task_processing_date { get; set; } = "2022-05-05 11:00:00";

        /// <summary>
        /// Фактическая дата проведения работ  контроля 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actual_task_processing_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Actual_task_processing_date { get; set; } = "2022-05-05 11:00:00";

        /// <summary>
        /// Пояснение исполнительного   контролирующего органа
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Ответственное за работу лицо от органа исполнения  проверки
        /// </summary>
        [Newtonsoft.Json.JsonProperty("responsible_person", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Responsible_person { get; set; }

        /// <summary>
        /// Номер телефона ответственного лица
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contact_phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contact_phone { get; set; }

        /// <summary>
        /// Адрес эл. почты ответственного лица
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contact_email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contact_email { get; set; }

        /// <summary>
        /// Выбор типа организации:
        /// <br/> * `EXECUTIVE` - исполнительные органы
        /// <br/> * `SUPERVISING` - контролирующие органы
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContractorTaskType Type { get; set; } = CityWatch.Api.Controllers.ContractorTaskType.EXECUTIVE;

        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<MediaContent> Attachments { get; set; }

        [Newtonsoft.Json.JsonProperty("deleted_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Deleted_at { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ContractorTaskForm
    {
        [Newtonsoft.Json.JsonProperty("request_id", Required = Newtonsoft.Json.Required.Always)]
        public long Request_id { get; set; }

        [Newtonsoft.Json.JsonProperty("contractor_id", Required = Newtonsoft.Json.Required.Always)]
        public long Contractor_id { get; set; }

        /// <summary>
        /// Пояснение исполнительного   контролирующего органа
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>
        /// Ответственное за работу лицо от органа исполнения  проверки
        /// </summary>
        [Newtonsoft.Json.JsonProperty("responsible_person", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Responsible_person { get; set; }

        /// <summary>
        /// Номер телефона ответственного лица
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contact_phone", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Contact_phone { get; set; }

        /// <summary>
        /// Адрес эл. почты ответственного лица
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contact_email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Contact_email { get; set; }

        /// <summary>
        /// Предполагаемая дата проведения работ  контроля 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimated_task_processing_date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Estimated_task_processing_date { get; set; } = "2022-05-05 11:00:00";

        /// <summary>
        /// Фактическая дата проведения работ  контроля 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actual_task_processing_date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Actual_task_processing_date { get; set; } = "2022-05-05 11:00:00";

        /// <summary>
        /// Выбор типа организации:
        /// <br/> * `EXECUTIVE` - исполнительные органы
        /// <br/> * `SUPERVISING` - контролирующие органы
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContractorTaskFormType Type { get; set; } = CityWatch.Api.Controllers.ContractorTaskFormType.EXECUTIVE;

        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<MediaContent> Attachments { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class RequestByContractor
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("contractor_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Contractor_id { get; set; }

        [Newtonsoft.Json.JsonProperty("request_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Request_id { get; set; }

        /// <summary>
        /// Выбор типа задачи для органа - контроль, исполнение:
        /// <br/> * `EXECUTIVE` - исполнение
        /// <br/> * `SUPERVISING` - контроль
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RequestByContractorType Type { get; set; } = CityWatch.Api.Controllers.RequestByContractorType.EXECUTION;

        /// <summary>
        /// краткое пояснение исполнительного \ контролирующего органа
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// медиа данные по исполнению \ контролю
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<MediaContent> Attachments { get; set; }

        /// <summary>
        /// время проведения работ \ контроля
        /// </summary>
        [Newtonsoft.Json.JsonProperty("worked_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Worked_at { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class MailingQuery
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("address_to", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address_to { get; set; }

        /// <summary>
        /// Тип рассылки:
        /// <br/>  * `PHONE` - при помощи смс
        /// <br/>  * `MAIL` - при помощи почты
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MailingQueryType Type { get; set; }

        /// <summary>
        /// Статус отправки:
        /// <br/>  * `SUCCESS` - успешная отправка
        /// <br/>  * `FAILURE` - ошибка при попытке отправки
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MailingQueryStatus Status { get; set; }

        /// <summary>
        /// Название шаблона для рассылки (для email)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("template_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Template_name { get; set; }

        [Newtonsoft.Json.JsonProperty("message_object", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Message_object Message_object { get; set; }

        [Newtonsoft.Json.JsonProperty("request_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Request_id { get; set; }

        [Newtonsoft.Json.JsonProperty("deleted_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Deleted_at { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class MailingQueryForm
    {
        [Newtonsoft.Json.JsonProperty("address_to", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address_to { get; set; }

        /// <summary>
        /// Тип рассылки:
        /// <br/>  * `PHONE` - при помощи смс
        /// <br/>  * `MAIL` - при помощи почты
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MailingQueryFormType Type { get; set; }

        /// <summary>
        /// Статус отправки:
        /// <br/>  * `SUCCESS` - успешная отправка
        /// <br/>  * `FAILURE` - ошибка при попытке отправки
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MailingQueryFormStatus Status { get; set; }

        /// <summary>
        /// Название шаблона для рассылки (для email)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("template_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Template_name { get; set; }

        [Newtonsoft.Json.JsonProperty("message_object", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Message_object2 Message_object { get; set; }

        [Newtonsoft.Json.JsonProperty("request_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Request_id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Story
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }

        /// <summary>
        /// Группа, по которой можно объединить истории под одну плитку
        /// </summary>
        [Newtonsoft.Json.JsonProperty("group_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Group_name { get; set; }

        /// <summary>
        /// Позиция в общей выдаче (позиция в рамках группы формируется по дате добавления)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Position { get; set; }

        /// <summary>
        /// Имя отправителя новости
        /// </summary>
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Author { get; set; }

        /// <summary>
        /// Тип содержимого: * `IMAGE` - история, фоном которой является изображение * `VIDEO` - история, фоном которой является видео
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StoryContent_type Content_type { get; set; }

        /// <summary>
        /// Ссылка на контента согласно типу
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content_url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content_url { get; set; }

        /// <summary>
        /// Срок жизни новости
        /// </summary>
        [Newtonsoft.Json.JsonProperty("live_to", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Live_to { get; set; }

        /// <summary>
        /// Длительность слайда
        /// </summary>
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Duration { get; set; }

        /// <summary>
        /// * `INFORMATION` - информационная история (цвет зеленый) * `WARNING` - предупреждающая история (оранжевый цвет) * `DANGER` - критически важная новость (красный цвет) * `ADVERTING` - реклама (синий цвет)
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("story_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Story_type Story_type { get; set; }

        /// <summary>
        /// идентификатор администратора, который добавил новость (историю)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("moderator_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Moderator_id { get; set; }

        /// <summary>
        /// состояния активности (отображения) новости
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is_active", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_active { get; set; } = true;

        /// <summary>
        /// Число просмотров (расчетное поле)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("watch_count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Watch_count { get; set; } = 0;

        [Newtonsoft.Json.JsonProperty("deleted_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Deleted_at { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class StoryForm
    {
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }

        /// <summary>
        /// Группа, по которой можно объединить истории под одну плитку
        /// </summary>
        [Newtonsoft.Json.JsonProperty("group_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Group_name { get; set; }

        /// <summary>
        /// Позиция в общей выдаче (позиция в рамках группы формируется по дате добавления)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Position { get; set; }

        /// <summary>
        /// Имя отправителя новости
        /// </summary>
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Author { get; set; }

        /// <summary>
        /// Тип содержимого: * `IMAGE` - история, фоном которой является изображение * `VIDEO` - история, фоном которой является видео
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StoryFormContent_type Content_type { get; set; }

        /// <summary>
        /// Ссылка на контента согласно типу
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content_url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content_url { get; set; }

        /// <summary>
        /// Срок жизни новости
        /// </summary>
        [Newtonsoft.Json.JsonProperty("live_to", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Live_to { get; set; }

        /// <summary>
        /// Длительность слайда
        /// </summary>
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Duration { get; set; }

        /// <summary>
        /// * `INFORMATION` - информационная история (цвет зеленый) * `WARNING` - предупреждающая история (оранжевый цвет) * `DANGER` - критически важная новость (красный цвет) * `ADVERTING` - реклама (синий цвет)
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("story_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StoryFormStory_type Story_type { get; set; }

        /// <summary>
        /// идентификатор администратора, который добавил новость (историю)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("moderator_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Moderator_id { get; set; }

        /// <summary>
        /// состояния активности (отображения) новости
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is_active", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_active { get; set; } = true;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Region
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// Позиция региона в списке
        /// </summary>
        [Newtonsoft.Json.JsonProperty("positions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Positions { get; set; }

        /// <summary>
        /// состояния активности региона
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is_active", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_active { get; set; } = true;

        [Newtonsoft.Json.JsonProperty("deleted_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Deleted_at { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class RegionForm
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// Позиция региона в списке
        /// </summary>
        [Newtonsoft.Json.JsonProperty("positions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Positions { get; set; }

        /// <summary>
        /// состояния активности региона
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is_active", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_active { get; set; } = true;

        [Newtonsoft.Json.JsonProperty("deleted_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Deleted_at { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class StoppingPoint
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// Название остановочного пункта
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// название управляющего предприятия
        /// </summary>
        [Newtonsoft.Json.JsonProperty("manager_company", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Manager_company { get; set; }

        /// <summary>
        /// город \ поселок \ село где расположен остановочный пункт
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        [Newtonsoft.Json.JsonProperty("route", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransportRoutes Route { get; set; }

        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Latitude { get; set; } = 0D;

        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Longitude { get; set; } = 0D;

        [Newtonsoft.Json.JsonProperty("deleted_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Deleted_at { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class StoppingPointForm
    {
        /// <summary>
        /// Название остановочного пункта
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// название управляющего предприятия
        /// </summary>
        [Newtonsoft.Json.JsonProperty("manager_company", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Manager_company { get; set; }

        /// <summary>
        /// город \ поселок \ село где расположен остановочный пункт
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Latitude { get; set; } = 0D;

        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Longitude { get; set; } = 0D;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class TransportRoutes
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// Название маршрута
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// номер маршрута
        /// </summary>
        [Newtonsoft.Json.JsonProperty("route_number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Route_number { get; set; }

        /// <summary>
        /// Номер машины
        /// </summary>
        [Newtonsoft.Json.JsonProperty("car_number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Car_number { get; set; }

        [Newtonsoft.Json.JsonProperty("drivers_on_route", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<User> Drivers_on_route { get; set; }

        [Newtonsoft.Json.JsonProperty("deleted_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Deleted_at { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class TransportRoutesForm
    {
        /// <summary>
        /// Название маршрута
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// номер маршрута
        /// </summary>
        [Newtonsoft.Json.JsonProperty("route_number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Route_number { get; set; }

        /// <summary>
        /// идентификаторы пользователей-водителей на указанном маршруте
        /// </summary>
        [Newtonsoft.Json.JsonProperty("drivers_user_ids", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> Drivers_user_ids { get; set; }

        /// <summary>
        /// Номер машины
        /// </summary>
        [Newtonsoft.Json.JsonProperty("car_number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Car_number { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Body
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Body2
    {
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Body3
    {
        [Newtonsoft.Json.JsonProperty("refreshToken", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RefreshToken { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Body4
    {
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Body5
    {
        [Newtonsoft.Json.JsonProperty("newPassword", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewPassword { get; set; }

        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Body6
    {
        [Newtonsoft.Json.JsonProperty("newPassword", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewPassword { get; set; }

        [Newtonsoft.Json.JsonProperty("oldPassword", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OldPassword { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Body7
    {
        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Latitude { get; set; }

        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Longitude { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Body8
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Level
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INFO")]
        INFO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DANGER")]
        DANGER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"WARNING")]
        WARNING = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"COORDS_ALERT")]
        COORDS_ALERT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TEXT")]
        TEXT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Send_as
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AS_NOTIFICATION")]
        AS_NOTIFICATION = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AS_EMAIL")]
        AS_EMAIL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AS_EMAIL_AND_NOTIFICATION")]
        AS_EMAIL_AND_NOTIFICATION = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AS_SMS")]
        AS_SMS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Category
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SELECTED_USERS")]
        SELECTED_USERS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ONLY_USERS")]
        ONLY_USERS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ONLY_ACTIVE_REQUEST")]
        ONLY_ACTIVE_REQUEST = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ONLY_ARCHIVE_REQUEST")]
        ONLY_ARCHIVE_REQUEST = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ONLY_CONTRACTORS")]
        ONLY_CONTRACTORS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ONLY_CONTRACTORS_EXECUTIVE")]
        ONLY_CONTRACTORS_EXECUTIVE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ONLY_CONTRACTORS_SUPERVISING")]
        ONLY_CONTRACTORS_SUPERVISING = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Body9
    {
        [Newtonsoft.Json.JsonProperty("start_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Start_at { get; set; }

        [Newtonsoft.Json.JsonProperty("end_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string End_at { get; set; }

        [Newtonsoft.Json.JsonProperty("object_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> Object_id { get; set; }

        /// <summary>
        /// Статистика по:
        /// <br/>  * `REQUEST_BY_CATEGORIES` - запросы по категориям
        /// <br/>  * `REQUEST_BY_CONTRACTORS` - запросы по исполнительным \ контролирующим органам
        /// <br/>  * `REQUEST_BY_CONTRACTORS_EXECUTIVE` - запросы по исполнительным  органам
        /// <br/>  * `REQUEST_BY_CONTRACTORS_SUPERVISING` - запросы по контролирующим органам
        /// <br/>  * `CONTRACTORS` - добавленные исполнительные \ контролирующие органы
        /// <br/>  * `ACCEPTED_REQUESTS` - принятые в работу заявки
        /// <br/>  * `DECLINE_REQUESTS` - отклоненные заявки
        /// <br/>  * `SUMMARY_ALL` - суммарная сводка по заявкам
        /// <br/>  * `NEW_USERS` - новые пользователи
        /// <br/>  * `ACTIVE_USERS` - активные пользователи
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("object_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Body9Object_type Object_type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Body10
    {
        [Newtonsoft.Json.JsonProperty("start_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Start_at { get; set; }

        [Newtonsoft.Json.JsonProperty("end_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string End_at { get; set; }

        [Newtonsoft.Json.JsonProperty("category_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> Category_id { get; set; }

        /// <summary>
        /// Радиус, в котором отображается тепловая карта
        /// </summary>
        [Newtonsoft.Json.JsonProperty("radius", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Radius { get; set; }

        /// <summary>
        /// широта
        /// </summary>
        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Latitude { get; set; }

        /// <summary>
        /// долгота
        /// </summary>
        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Longitude { get; set; }

        /// <summary>
        /// Тепловая карта заявок:
        /// <br/>  * `ACCEPTED` - принятые запросы
        /// <br/>  * `RESOLVED` - выполненные запросы
        /// <br/>  * `NOT_ACCEPTED` - не принятые запросы
        /// <br/>  * `DECLINED` - отклоненные запрос
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Body10Type Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Body11
    {
        [Newtonsoft.Json.JsonProperty("start_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Start_at { get; set; }

        [Newtonsoft.Json.JsonProperty("end_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string End_at { get; set; }

        [Newtonsoft.Json.JsonProperty("category_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> Category_id { get; set; }

        /// <summary>
        /// Экспорт заявок по типу:
        /// <br/>  * `ACCEPTED` - принятые запросы
        /// <br/>  * `RESOLVED` - выполненные запросы
        /// <br/>  * `NOT_ACCEPTED` - не принятые запросы
        /// <br/>  * `DECLINED` - отклоненные запрос
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Body11Type Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Body12
    {
        [Newtonsoft.Json.JsonProperty("role_ids", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> Role_ids { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Body13
    {
        /// <summary>
        /// радиус охвата заявок
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Distance { get; set; } = 50D;

        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Longitude { get; set; }

        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Latitude { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Body14
    {
        /// <summary>
        /// рейтинг заявки (может быть в плюс и в минус)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Rating { get; set; } = 50;

        [Newtonsoft.Json.JsonProperty("request_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Request_id { get; set; } = 1;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    public enum MessageLevel
    {
        Info,
        Warning,
        Danger
    }

    public enum MessageType
    {
        CoordsAlert,
        Text
    }

    public enum MessageNotificationType
    {
        // TODO: Нейминг ужасен. AlKoz
        // TODO: Also, это должен быть флаг. AlKoz
        AsNotification,
        AsEmail,
        AsEmailAndNotification,
        AsSms,
        All
    }

    public enum MessageNotificationFilter
    {
        SelectedUsers,
        OnlyUsers,
        All,
        OnlyActiveRequest,
        OnlyArchiveRequest,
        OnlyContractors,
        OnlyContractorsExecutive,
        OnlyContractorsSupervising
    }

    public partial class MailingBody
    {
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message{ get; set; }

        /// <summary>
        /// Уровень сообщения:
        ///     * `INFO` - оповещение
        ///     * `DANGER` - критически важное
        ///     * `WARNING` - предупреждение
        /// </summary>
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MessageLevel Level { get; set; }

        /// <summary>
        ///Тип сообщения:
        ///  * `COORDS_ALERT` - отметка на карте(на случай проишествия)
        ///  * `TEXT` - текстовое сообщение с вложениями
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Type { get; set; }

        /// <summary>
        /// Способ отправки оповещения(по умолчанию отправка на почту) :
        ///                                  * `AS_NOTIFICATION` - всплывающее сообщение
        ///                                  * `AS_EMAIL` - почтовое сообщение
        ///                                  * `AS_EMAIL_AND_NOTIFICATION` - всплывающее сообщение + почта
        ///                                   * `AS_SMS` - по СМС
        ///                                   * `ALL` - одновременно через все каналы оповещений
        /// </summary>
        [Newtonsoft.Json.JsonProperty("send_as", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MessageNotificationType SendAs { get; set; } = MessageNotificationType.AsEmail;

        /// <summary>
        /// Приоритетный фильтр для рассылки.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user_ids", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IEnumerable<int> UserIds { get; set; }

        /// <summary>
        /// Категория отправки:
        ///     * `SELECTED_USERS` - только указанным пользователям
        ///     * `ONLY_USERS` - только пользователям
        ///     * `ALL` - всем
        ///     * `ONLY_ACTIVE_REQUEST` - только пользователям, у которых активные заявки
        ///     * `ONLY_ARCHIVE_REQUEST` - только пользователям с архивными заявками
        ///     * `ONLY_CONTRACTORS` - только исполнительным \ контролирующим органам
        ///     * `ONLY_CONTRACTORS_EXECUTIVE` - только исполнительным органам
        ///     * `ONLY_CONTRACTORS_SUPERVISING` - только контролирующим органам
        /// </summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MessageNotificationFilter Category { get; set; }

        // TODO: Непонятно как пилить контракт. AlKoz. Даю сноску на сваггер.
        //filenames:
        //                            type: array
        //                            default: []
        //items:
        //                                type: string
        //                                format: binary
        [Newtonsoft.Json.JsonProperty("filenames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IEnumerable<FileParameter> Filenames { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Response
    {
        [Newtonsoft.Json.JsonProperty("accessToken", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccessToken { get; set; }

        [Newtonsoft.Json.JsonProperty("refreshToken", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RefreshToken { get; set; }

        [Newtonsoft.Json.JsonProperty("tokenType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TokenType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Response2
    {
        [Newtonsoft.Json.JsonProperty("accessToken", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccessToken { get; set; }

        [Newtonsoft.Json.JsonProperty("refreshToken", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RefreshToken { get; set; }

        [Newtonsoft.Json.JsonProperty("tokenType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TokenType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Response3
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Response4
    {
        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Latitude { get; set; }

        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Longitude { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Response5
    {
        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Latitude { get; set; }

        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Longitude { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Response6
    {
        [Newtonsoft.Json.JsonProperty("heat_map_data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Heat_map_data> Heat_map_data { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Response7 : PaginateObject
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<User> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Response8 : PaginateObject
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Profile> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Response9 : PaginateObject
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ProblemCategory> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Response10 : PaginateObject
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Request> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Response11 : PaginateObject
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Request> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Response12 : PaginateObject
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Request> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Response13 : PaginateObject
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Request> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Response14 : PaginateObject
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Request> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Response15 : PaginateObject
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Request> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Response16 : PaginateObject
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Contractor> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Response17 : PaginateObject
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<StoredRequest> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Response18 : PaginateObject
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Role> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Response19 : PaginateObject
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<MailingQuery> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Response20 : PaginateObject
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ContractorTask> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Response21 : PaginateObject
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Story> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Response22 : PaginateObject
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Region> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum RoleTitle
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GUEST")]
        GUEST = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"USER")]
        USER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ADMINISTRATOR")]
        ADMINISTRATOR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CONTRACTOR")]
        CONTRACTOR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CONTRACTOR_EXECUTIVE")]
        CONTRACTOR_EXECUTIVE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CONTRACTOR_SUPERVISING")]
        CONTRACTOR_SUPERVISING = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"TECHNICAL")]
        TECHNICAL = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum RoleFormTitle
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GUEST")]
        GUEST = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"USER")]
        USER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ADMINISTRATOR")]
        ADMINISTRATOR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CONTRACTOR")]
        CONTRACTOR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CONTRACTOR_EXECUTIVE")]
        CONTRACTOR_EXECUTIVE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CONTRACTOR_SUPERVISING")]
        CONTRACTOR_SUPERVISING = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"TECHNICAL")]
        TECHNICAL = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum RequestSource
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LANDING")]
        LANDING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VK")]
        VK = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OPERATOR")]
        OPERATOR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EXCEL")]
        EXCEL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"TELEGRAM")]
        TELEGRAM = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ANDROID")]
        ANDROID = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"IOS")]
        IOS = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum RequestStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IN PROCESSING")]
        IN_PROCESSING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN CONSIDERATION")]
        IN_CONSIDERATION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"IN EXECUTION")]
        IN_EXECUTION = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IN EXECUTION CHECK")]
        IN_EXECUTION_CHECK = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ARCHIVED")]
        ARCHIVED = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Stored_profile_data
    {
        [Newtonsoft.Json.JsonProperty("full_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Full_name { get; set; }

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location { get; set; }

        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }

        /// <summary>
        /// персональный рейтинг пользователя на момент обращения
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Rating { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum RequestFormSource
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LANDING")]
        LANDING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VK")]
        VK = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OPERATOR")]
        OPERATOR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EXCEL")]
        EXCEL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"TELEGRAM")]
        TELEGRAM = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ANDROID")]
        ANDROID = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"IOS")]
        IOS = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum RequestFormStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IN PROCESSING")]
        IN_PROCESSING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN CONSIDERATION")]
        IN_CONSIDERATION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"IN EXECUTION")]
        IN_EXECUTION = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IN EXECUTION CHECK")]
        IN_EXECUTION_CHECK = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum MediaContentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IMAGE")]
        IMAGE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VIDEO")]
        VIDEO = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Links
    {
        [Newtonsoft.Json.JsonProperty("first", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string First { get; set; }

        [Newtonsoft.Json.JsonProperty("last", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last { get; set; }

        [Newtonsoft.Json.JsonProperty("prev", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prev { get; set; }

        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Next { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum ContractorType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EXECUTIVE")]
        EXECUTIVE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPERVISING")]
        SUPERVISING = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Schedule
    {
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("day_index", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Day_index { get; set; }

        [Newtonsoft.Json.JsonProperty("start_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Start_at { get; set; }

        [Newtonsoft.Json.JsonProperty("end_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string End_at { get; set; }

        [Newtonsoft.Json.JsonProperty("is_day_of", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_day_of { get; set; } = false;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum ContractorFormType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EXECUTIVE")]
        EXECUTIVE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPERVISING")]
        SUPERVISING = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Schedule2
    {
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("day_index", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Day_index { get; set; }

        [Newtonsoft.Json.JsonProperty("start_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Start_at { get; set; }

        [Newtonsoft.Json.JsonProperty("end_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string End_at { get; set; }

        [Newtonsoft.Json.JsonProperty("is_day_of", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_day_of { get; set; } = false;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum ContractorTaskType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EXECUTIVE")]
        EXECUTIVE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPERVISING")]
        SUPERVISING = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum ContractorTaskFormType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EXECUTIVE")]
        EXECUTIVE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPERVISING")]
        SUPERVISING = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum RequestByContractorType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"VERIFICATION")]
        VERIFICATION = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EXECUTION")]
        EXECUTION = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum MailingQueryType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PHONE")]
        PHONE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MAIL")]
        MAIL = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum MailingQueryStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SUCCESS")]
        SUCCESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FAILURE")]
        FAILURE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Message_object
    {
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Author { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum MailingQueryFormType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PHONE")]
        PHONE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MAIL")]
        MAIL = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum MailingQueryFormStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SUCCESS")]
        SUCCESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FAILURE")]
        FAILURE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Message_object2
    {
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Author { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum StoryContent_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IMAGE")]
        IMAGE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VIDEO")]
        VIDEO = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Story_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INFORMATION")]
        INFORMATION = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WARNING")]
        WARNING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DANGER")]
        DANGER = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERTING")]
        ADVERTING = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum StoryFormContent_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IMAGE")]
        IMAGE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VIDEO")]
        VIDEO = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum StoryFormStory_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INFORMATION")]
        INFORMATION = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WARNING")]
        WARNING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DANGER")]
        DANGER = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVERTING")]
        ADVERTING = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Body9Object_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST_BY_CATEGORIES")]
        REQUEST_BY_CATEGORIES = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST_BY_CONTRACTORS")]
        REQUEST_BY_CONTRACTORS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST_BY_CONTRACTORS_EXECUTIVE")]
        REQUEST_BY_CONTRACTORS_EXECUTIVE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST_BY_CONTRACTORS_SUPERVISING")]
        REQUEST_BY_CONTRACTORS_SUPERVISING = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CONTRACTORS")]
        CONTRACTORS = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED_REQUESTS")]
        ACCEPTED_REQUESTS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DECLINE_REQUESTS")]
        DECLINE_REQUESTS = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"SUMMARY_ALL")]
        SUMMARY_ALL = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"NEW_USERS")]
        NEW_USERS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_USERS")]
        ACTIVE_USERS = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Body10Type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RESOLVED")]
        RESOLVED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_ACCEPTED")]
        NOT_ACCEPTED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DECLINED")]
        DECLINED = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum Body11Type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RESOLVED")]
        RESOLVED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_ACCEPTED")]
        NOT_ACCEPTED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DECLINED")]
        DECLINED = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Heat_map_data
    {
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Weight { get; set; }

        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Latitude { get; set; }

        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Longitude { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this(data, null, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
            : this(data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName, string contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }

        public string ContentType { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }



}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
#pragma warning restore 3016